什么是Spring？

Spring就是把每个bean（实体类）与bean的关系全部交给第三方容器进行管理。
那么这个第三方容器就是spring，对整个对象生命周期进行管理
Spring的核心（IOC、DI、AOP）
DI与IOC区别？
DI是依赖注入，IOC是创建对象的（控制反转）

Spring 可以整合很多框架

Spring 中给对象属性赋值要用到依赖注入（DI）
依赖注入：	1、通过构造函数
			2、 通过set方法给属性注入值 （常用）
			3、 p名称空间
			4、 注解

注解 版本使用：

//注解方式可以简化spring的IOC容器的配置!

总结：1、 使用注解，可以简化配置，且可以把对象加入IOC容器,及处理依赖关系(DI)
	  2、 注解可以和XML配置一起使用。

Spring IOC的原理？
解析xml配置，获取bean class地址
只用java的反射机制，进行实例化对象
然后返回对象

可以通过构造函数来证明spring是单例还是多例
Spring 默认是单例的
默认单例会有线程安全的问题

Spring中bean id重复了会怎样？
会报错
1、Xml文件中bean id是不允许重复的
2、注解和xml是不会爆错的

Spring 的生命周期
Spring默认单例，能不能该成不是单例？

在spring中有四种生命周期
1、pritotype 多例 当你调用getbean方法的时候才会初始化
2、Singleton 单例 
3、Request   http请求request作用域里面使用
4、Session   http请求 Session 作用域里面使用



IOC创建对象的方式有：  1、调用无参构造器    （默认走无参构造函数）
2、 带参数构造器
3、 工厂创建对象
工厂类，静态方法创建对象
工厂类，非静态方法创建对象



什么是DI？
DI（依赖注入）
解决对象之间的依赖关系



Spring 中给对象属性赋值要用到依赖注入（DI）
依赖注入：	1、通过构造函数
			2、 通过set方法给属性注入值 （常用）
			3、 p名称空间
4、自动装配
			5、 注解

使用set注入原理： 属性必须有一个set方法

P标签注入方式 ：
例：<bean id=”****” class=”*****” p:userService-ref=”userService”></bean>
<bean id=”****” class=”*****” p:userDao-ref=”userDao”></bean>
像这样注入一下就行了


注解 版本使用：

//注解方式可以简化spring的IOC容器的配置!

总结：1、 使用注解，可以简化配置，且可以把对象加入IOC容器,及处理依赖关系(DI)
	  2、 注解可以和XML配置一起使用。


AOP

AOP（Aspect Oriented Programming）面向切面(方面)编程 是OOP的延续

1、AOP是目前软件开发中的一个热点
2、利用AOP可以对业务逻辑的各个部分进行隔离
3、从而使得业务逻辑各部分之间的耦合度降低
4、提高程序的可重用性，同时提高了开发的效率

主要功能 ：日志记录，性能统计，安全控制，事务处理，异常处理；
主要意图 ：将日志记录，性能统计，安全控制，事务处理，异常处理等 
代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。

可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。AOP实际是GoF设计模式的延续，设计模式孜孜不倦追求的是调用者和被调用者之间的解耦，AOP可以说也是这种目标的一种实现。
<---假设把应用程序想成一个立体结构的话，OOP的利刃是纵向切入系统，把系统划分为很多个模块（如：用户模块，文章模块等等），而AOP的利刃是横向切入系统，提取各个模块可能都要重复操作的部分（如：权限检查，日志记录等等）。由此可见，AOP是OOP的一个有效补充。--->
注意：AOP不是一种技术，实际上是编程思想。凡是符合AOP思想的技术，都可以看成是AOP的实现。

关注点,
	重复代码就叫做关注点；
切面，
	 关注点形成的类，就叫切面(类)！
	 面向切面编程，就是指 对很多功能都有的重复的代码抽取，再在运行的时候往业务方法上动态植入“切面类代码”。
切入点，
	执行目标对象方法，动态植入切面代码。

可以通过切入点表达式，指定拦截哪些类的哪些方法； 给指定的类在运行的时候植入切面类代码。


实现AOP编程的方式：1、注解方式实现2、XML方式实现


注解方式

<aop:aspectj-autoproxy></aop:aspectj-autoproxy>  开启事物注解权限

4) 使用注解
@Aspect							指定一个类为切面类		
@Pointcut("execution(* com.itmayiedu.service.UserService.add(..))")  指定切入点表达式

@Before("pointCut_()")				前置通知: 目标方法之前执行
@After("pointCut_()")					后置通知：目标方法之后执行（始终执行）
@AfterReturning("pointCut_()")		    返回后通知： 执行方法结束前执行(异常不执行)
@AfterThrowing("pointCut_()")			异常通知:  出现异常时候执行
@Around("pointCut_()")				环绕通知： 环绕目标方法执行

XML方式
Xml实现aop编程：
	1、 引入jar文件  【aop 相关jar， 4个】
	2、 引入aop名称空间
	3、aop 配置

		* 配置切面类 （重复执行代码形成的类）
		* aop配置
			拦截哪些方法 / 拦截到方法后应用通知代码

事务

事务是用来保证数据的一致性的

事务的特性
1、原子性-----------不可分割
2、一致性-----------总数据保持一致 a+1 b-1
3、隔离性-----------互不影响，在并发编程两个线程同时操作事务
4、持久性-----------

使用事务的方式
1、编程事务----------- 手动的
2、声明式事务------自动的
Xml方式
注解方式

方法结束时提交事务
自动的会在抛出异常时才会回滚
