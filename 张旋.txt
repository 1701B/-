 spring核心技术

 SpringIoc DI AOP 事务传播行为
springIOC与SpringAOP
spring事务与传播行为&sring强弱分析环境搭建

spring
什么事spring是一个容器,管理每个bean（对象）与bean(对象)
之间关系，使用spring进行管理

springIOC、AOP、DI、事务管理、传播行为

springIOC？

三层结构
控制层----web层
业务逻辑层--service层
数据访问层---dao层

spring好处   解耦、单例(节约内存)

任何对象初始化过程,全部都要交给spring管理

什么是IOC？
控制反转  将bean的对象交给spring容器进行管理
反射-----创建对象  解析xml demo04j
什么DI?
依赖注入   依赖  解决对象之间依赖

spring 环境搭建
xml
注解---为主流

springIOC接口 反射机制(初始化)
对象
单例
JVM只能运行存在一次
多例
每次运行都会创建一次
request
请求作用域
session
对象和session绑定管理

怎么证明对象是单例
构造函数--反射

使用单例 注意事项:

线程安全
你在项目中遇到过线程安全吗?
  
单例  懒汉式和饿汉式

spring使用饿汉式  线程安全

作用域:
Singleton 单例
Prototype 原型(多例:调用bean方法,才能初始化)
Request  http请求request作用域里
Session   http请求在session作用域里
注入方式:
1.构造函数
2.常见set方式:
3.Set执行方法(属性必须有set方法,通过反射)
在xml中,通过反射,找对应的类中的方法,通过反射机制,将xml中配置的对象,传参到方法中,就实现了set方法
4.,p标签注入
5.注解方式
代理模式
 :作用:对目标对象进行访问的方式(中介) 
好处: 提高安全性

代理分为静态代理,动态代理:
 静态代理: 产生代理类(中介)
 动态代理:  不产生代理类, 分为:JDK动态代理   反射机制 Cglib动态代理   字节码
SpringAop
  面向切面编程(思想)
  应用场景:权限控制,事务管理 日志打印 性能统计
AOP分为关注点:重复代码切面:提取重复的代码
切入点:需要拦截的方法
事务的概念;保证事务的一致性
 分为:一致性:
一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。
原子性:原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响
隔离性:
	隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离
持久性:持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性 的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。
　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误
Spring的事务分类
1.编程事务(手动挡事务)
2.声明式事务(自动挡事务)
SpringBoot的异常处理的几种注解?
@ExceptionHandler
功能:自动捕获controller层出现的制定类型的异常,并对该异常进行相应的异常处理,比如在controller层处理…exception类型异常,就可以在controller层的类中定义方法
如果想要一个方法处理多种类型异常,就需要在({…,…})以’,’逗号分隔
@RestControllerAdvice
@ControllerAdvice和@RestControllerAdvice都可以指向控制器的一个子集
 当我们定义了一个自定义返回参数格式时,希望得到同意的返回,发生异常,也希望将异常统一返回,就需要用到@ControllerAdvice或者@RestControllerAdvice(如果全部异常处理返回json.就可以使用@RestControllerAdvice代替@ControllerAdvice)这样在方法上就可以不需要添加@ResponseBody

统一异常处理

正常结果处理
			