IOC
是spring的核心内容
作用:创建对象,处理对象的依赖关系
控制反转  将bean的对象交给spring容器进行管理
实现原理:反射---创建对象  解析xml
解析xml,获取bean calss地址,通过java反射,进行实例化对象,第三方返回对象

创建对象方式
:  
注解 
调用无参构造器  (默认)
,有参构造器,
工厂创建对象 :
1.静态方法创建对象,
2.非静态方法创建对象

  对象:
单例:JVM只能运行存在一次
多例:每次运行都会创建一次
Rquest:请求作用域
Session:对象和session绑定管理

Spring对象默认是单例
  单例分为懒汉式,饿汉式
   Spring对象的单例是饿汉式(线程安全,访问统一对象)
判断是否是单例
   通过构造函数―反射 


注: Bean  Id相同---,
分为两种情况:
在xml中,不允许id重复,会报错
在xml和注解中,不会报错
DI
依赖注入  解决对象之间的依赖
注入方式:
1.构造函数
2.常见set方式:
3.Set执行方法(属性必须有set方法,通过反射)
 在xml中,通过反射,找对应的类中的方法,通过反射机制,将xml中配置的对象,传参到方法中,就实现了set方法

4.,p标签注入
5.注解方式
@Resource: 默认以名称进行查询 (JDK1.6以上)
@Autowired:”默认以类型进行查询 
AOP
代理模式
 :作用:对目标对象进行访问的方式(中介) 
好处: 提高安全性

代理分为静态代理,动态代理:
 静态代理: 产生代理类(中介)
 动态代理:  不产生代理类,
      分为:JDK动态代理   反射机制
          Cglib动态代理   字节码
SpringAop
  面向切面编程(思想)
  应用场景:权限控制,事务管理 日志打印 性能统计
AOP分为关注点:重复代码
		切面:提取重复的代码
		切入点:需要拦截的方法
Aop使用方式
XML,  注解

注解方式:----在类上面使用
@Aspect  (定义切面  表示类是切面类)
@Component(注入spring容器中)
------方法上---
@before(前置通知)
@after(后置通知)
@afterThowing(异常通知)
@around(环绕通知)

XML方式
在xml中配置方法名,根据方法名称进行拦截