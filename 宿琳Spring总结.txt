1. Spring的概述
   Spring框架，可以解决对象创建以及对象之间依赖关系的一种框架。
			且可以和其他框架一起使用；Spring与Struts,  Spring与hibernate
			(起到整合（粘合）作用的一个框架)
   Spring提供了一站式解决方案：
	1） Spring Core  spring的核心功能： IOC容器, 解决对象创建及依赖关系
	2） Spring Web  Spring对web模块的支持。
						- 可以与struts整合,让struts的action创建交给spring
					    - spring mvc模式
	3） Spring DAO  Spring 对jdbc操作的支持  【JdbcTemplate模板工具类】
	4） Spring ORM  spring对orm的支持： 
						 既可以与hibernate整合，【session】
						 也可以使用spring的对hibernate操作的封装
	5）Spring AOP  切面编程  事务管理是利用了aop的一个原理
	6）SpringEE   spring 对javaEE其他模块的支持


2. Spring的环境搭建
	spring环境需要maven 坐标
	需要交给Spring管理注入类
	spring配置文件
	测试类

3. SpringIOC 容器
	SpringIOC容器，是spring核心内容。
	作用： 创建对象 & 处理对象的依赖关系


4. singleton?作用域
	当一个bean的?作用域设置为singleton, 那么Spring IOC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。换言之，当把 一个bean定义设置为singleton作用域时，Spring IOC容器只会创建该bean定义的唯一实例。这个单一实例会被存储到单例缓存（singleton cache）中，并且所有针对该bean的后续请求和引用都 将返回被缓存的对象实例，这里要注意的是singleton作用域和GOF设计模式中的单例是完全不同的，单例设计模式表示一个ClassLoader中 只有一个class存在，而这里的singleton则表示一个容器对应一个bean，也就是说当一个bean被标识为singleton时 候，spring的IOC容器中只会存在一个该bean。


5. Prototype
	prototype作用域部署的bean，每一次请求（将其注入到另一个bean中，或者以程序的方式调用容器的?getBean()方法）都会产生一个新的bean实例，相当与一个new的操作，对于prototype作用域的bean，有一点非常重要，那就是Spring不能对一个prototype bean的整个生命周期负责，容器在初始化、配置、装饰或者是装配完一个prototype实例后，将它交给客户端，随后就对该prototype实例不闻不问了。不管何种作用域，容器都会调用所有对象的初始化生命周期回调方法，而对prototype而言，任何配置好的析构生命周期回调方法都将不会被调用。 清除prototype作用域的对象并释放任何prototype bean所持有的昂贵资源，都是客户端代码的职责。（让Spring容器释放被singleton作用域bean占用资源的一种可行方式是，通过使用 bean的后置处理器，该处理器持有要被清除的bean的引用。）


6. request
	request表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP request内有效，配置实例：



request、session、global session使用的时候首先要在初始化web的web.xml中做如下配置：


7. session
	session作用域表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP session内有效

8. 容器创建对象：
	创建对象, 有几种方式：
		1） 调用无参数构造器
		2） 带参数构造器
		3） 工厂创建对象
	工厂类，静态方法创建对象
	工厂类，非静态方法创建对象


9. 依赖注入：
	Spring中，如何给对象的属性赋值?  【DI, 依赖注入】
		1) 通过构造函数
		2) 通过set方法给属性注入值
		3) p名称空间
		4) 注解

10. 注解版本使用
	注解方式可以简化spring的IOC容器的配置!
	
	注解步骤：
	1）先引入context名称空间
		xmlns:context="http://www.springframework.org/schema/context"
	2）开启注解扫描
		<context:component-scan base-package="com.itmayiedu02"></context:component-scan>
	3）使用注解
		通过注解的方式，把对象加入ioc容器。

	   创建对象以及处理对象依赖关系，相关的注解：
		@Component   指定把一个对象加入IOC容器
		@Repository   作用同@Component； 在持久层使用
		@Service      作用同@Component； 在业务逻辑层使用
		@Controller    作用同@Component； 在控制层使用 
		@Resource     属性注入

	总结
        1） 使用注解，可以简化配置，且可以把对象加入IOC容器,及处理依赖关系(DI)
	2） 注解可以和XML配置一起使用。


11.@Resource与@Autowired区别
	1、@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。?
	2、@Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null?值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：?
	3、@Resource（这个注解属于J2EE的），默认安照名称进行装配，名称可以通过name属性进行指定，?
		如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。?当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。
	

	4.@Resource注解在字段上属于j2EE的减少了与spring的耦合,看起来没观

12.代理模式
	概述:
 		代理（Proxy）是一种设计模式， 提供了对目标对象另外的访问方式；即通过代理访问目标对象。 这样好处： 可以在目标对象实现的基础上，增强额外的功能操作。(扩展目标对象的功能)。
	
13. 操作数据库---放入页面进行展示
 三层架构 二层架构 一层架构  mvc架构

 一层架构 操作数据、业务逻辑、页面控制全部写在一个类里面，一个方法。
 二层架构 业务逻辑层和数据库访问层、页面控制
 三层架构 控制层、业务逻辑层、数据库访问层	
	 mvc 是一种软件 架构思想 不是设计模式。

14.di与ioc区别是什么？
	di做注入、ioc是创建对象。。

15.spring ioc原理是什么？
	解析xml配置 获取bean class地址
	使用java的反射机制 进行实例化对象
	第三返回对象。


16.spring的传播行为

	ROPAGATION_REQUIRED  如果当前有事物,就用当前的事物,不会新增事物。
	ROPAGATION_REQUIRED_NEW 如果当前有事物,不会加入当前事物,会新增事物。
	ROPAGATION_SUPPORTS   只是支持当前 方法 的事物 ,别的方法不管,  如果没有事物就不会以事物的方式执行  (界限:一个方法块就是一个事物)

17.声明事物
如果使用try catch捕获异常时,一定要在catch里手动回滚
	TransactionAspectSuuport.currentTransactionStatus().setRollbackOnly();
 如果没有 就会造成事物卡死  既不提交也不会滚




18.项目当中是怎么用事物的？

 事物用法分类
 ①编程事物 （理解成开车的手动挡）
 ②声明式事物（理解成自动挡）---- 别人面试问你 spring的事物
    xml方式
    注解方式 

  是在什么时候提交？ 方法结束就提交事物
  声明时的事物,当抛出异常的时候才会回滚，




19. 为什么要有事物概念
  	事物就是保证数据的一致性

20.事物的特性

 原子性
  不可分割
  一致性
  	你们去银行中转账 A5000-200 →200 B 200
  隔离性
  	互不影响, 在并发编程 两个线程 同时操作事物
  持久性

21.写一个自己的手动挡 编程事物 
  begin()--事物开启
  commit()--事物提交
   coms
















